pipeline {
    agent any

    environment {
        DOCKER_USER = 'callmenaul'
        DOCKER_IMAGE = 'alzheimers-datahub_diagnosing-server'
        DOCKER_TAG = "v${BUILD_NUMBER}.0"
        // Thông tin môi trường cho Python
        PYTHON_VERSION = '3.11'
        // Thông tin database và model path từ Jenkins credentials
        DB_HOST = credentials('DB_HOST')
        DB_USER = credentials('DB_USER')
        DB_PASSWORD = credentials('DB_PASSWORD')
        DB_NAME = credentials('DB_NAME')
        MODEL_PATH = credentials('MODEL_PATH')
    }

    stages {
        stage('Checkout') {
            steps {
                // Checkout code từ repository
                checkout scm
                
                // Kiểm tra thay đổi trong thư mục diagnosing_server
                script {
                    def changes = sh(script: 'git diff --name-only HEAD^ | grep "^diagnosing_server/"', returnStatus: true)
                    if (changes != 0) {
                        currentBuild.result = 'NOT_BUILT'
                        error('No changes in diagnosing_server directory. Skipping build.')
                    }
                }
            }
        }

        stage('Scan Requirements') {
            steps {
                dir('diagnosing_server') {
                    script {
                        // Kiểm tra tính hợp lệ của requirements.txt
                        sh 'pip install pip-audit'
                        
                        // Quét các dependencies để tìm lỗ hổng bảo mật
                        sh 'pip-audit -r requirements.txt || true'
                        
                        // Kiểm tra phiên bản của các packages
                        sh '''
                            echo "Checking package versions..."
                            while IFS= read -r line || [[ -n "$line" ]]; do
                                if [[ $line != "#"* ]] && [[ -n $line ]]; then
                                    package=$(echo $line | cut -d'=' -f1)
                                    pip index versions $package
                                fi
                            done < requirements.txt
                        '''
                    }
                }
            }
        }

        stage('Validate Dockerfile') {
            steps {
                dir('diagnosing_server') {
                    script {
                        // Kiểm tra cú pháp Dockerfile
                        sh 'docker run --rm -i hadolint/hadolint < Dockerfile || true'
                        
                        // Kiểm tra base image updates
                        def baseImage = sh(
                            script: 'grep "^FROM" Dockerfile | cut -d" " -f2',
                            returnStdout: true
                        ).trim()
                        sh "docker pull ${baseImage}"
                        
                        // Kiểm tra kích thước image
                        sh """
                            echo 'Estimated image size after build:'
                            docker build -t size-check . > /dev/null
                            docker images size-check --format '{{.Size}}'
                            docker rmi size-check
                        """
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                dir('diagnosing_server') {
                    // Build Docker image
                    sh "docker build -t ${DOCKER_USER}/${DOCKER_IMAGE}:${DOCKER_TAG} ."
                }
            }
        }

        stage('Deploy to Production') {
            when {
                branch 'develop'
            }
            steps {
                script {
                    // Deploy to development environment
                    sh """
                        docker-compose up -d
                    """
                }
            }
        }
    }

    post {
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
        always {
            
        }
    }
}