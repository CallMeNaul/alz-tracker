pipeline {
    agent {
        label 'local-agent'
    }

    environment {
        BUILD_SCM = 'https://github.com/CallMeNaul/alztracker-diagnosing_server.git'
        DEPLOY_SCM = 'https://github.com/CallMeNaul/alztrack-deployment.git'
        DOCKER_USER = 'callmenaul'
        DOCKER_IMAGE = 'alzheimer-diagnosing-server'
        DOCKER_TAG = "v${env.BUILD_NUMBER}.0"
        DEPLOYMENT_FILE = 'docker-compose.yml'
        SCAN_OUTPUT = 'vulnerabilities.txt'
        DEPLOY_BRANCH = 'main'
    }

    stages {
        stage('Info') {
            steps {
                sh(label: "‚ÑπÔ∏è Showing system info", script: """
                    whoami
                    pwd
                    ls
                """)
            }
        }

        stage('Checkout') {
            steps {
                cleanWs()
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: 'main']],
                    userRemoteConfigs: [[
                        url: env.BUILD_SCM,
                        credentialsId: 'login-github'
                    ]]
                ])
            }
        }

        stage('Check Changes') {
            steps {
                script {
                    def changedFiles = sh(label: "üîç Checking file changes", script: "git diff --name-only HEAD~1 HEAD", returnStdout: true).trim().split("\n")
                    if (changedFiles.length == 1 && changedFiles.contains("Jenkinsfile")) {
                        echo "‚ú® Only Jenkinsfile was changed - Pipeline will complete successfully"
                        currentBuild.result = 'SUCCESS'
                        env.ONLY_JENKINSFILE_CHANGED = 'true'
                        return
                    }
                }
            }
        }

        stage('Lint Backend') {
            when {
                expression { return env.ONLY_JENKINSFILE_CHANGED != 'true' }
            }
            steps {
                script {
                    sh(label: "üì¶ Installing pylint", script: "pip install pylint || true")
                    sh(label: "üîç Running pylint", script: "pylint backend.py || true")
                }
            }
        }

        stage('Update Model') {
            when {
                expression { return env.ONLY_JENKINSFILE_CHANGED != 'true' }
            }
            steps {
                script {
                    sh(label: "üì• Downloading model", script: 'rclone copy gdrive:$(head -n 1 model.txt) .')
                }
            }
        }

        stage('Trivy Filesystem Scan') {
            when {
                expression { return env.ONLY_JENKINSFILE_CHANGED != 'true' }
            }
            steps {
                script {
                    sh(label: "üîí Running Filesystem Security Scan", script: """
                        docker run --rm -v trivy-db:/root/.cache/ aquasec/trivy fs --cache-dir /root/.cache/ --no-progress --severity HIGH,CRITICAL . > \${SCAN_OUTPUT}
                        cat \${SCAN_OUTPUT}
                    """)
                }
            }
        }

        stage('Validate Dockerfile') {
            when {
                expression { return env.ONLY_JENKINSFILE_CHANGED != 'true' }
            }
            steps {
                script {
                    sh(label: "üîç Checking Dockerfile syntax", script: 'docker run --rm -i hadolint/hadolint < Dockerfile || true')
                    
                    def baseImage = sh(
                        label: "üîç Checking base image",
                        script: 'grep "^FROM" Dockerfile | cut -d" " -f2',
                        returnStdout: true
                    ).trim()
                    echo "üì¶ Base image: ${baseImage}"
                }
            }
        }

        stage('Build and Push Docker Image') {
            when {
                expression { return env.ONLY_JENKINSFILE_CHANGED != 'true' }
            }
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'login-dockerhub', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        sh(label: "üîë Authenticating with Docker Hub", script: 'echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin')
                    }
            
                    sh(label: "üèóÔ∏è Building Docker image", script: "docker build -t \${DOCKER_USER}/\${DOCKER_IMAGE}:\${DOCKER_TAG} .")
                    sh(label: "‚¨ÜÔ∏è Pushing Docker image", script: "docker push \${DOCKER_USER}/${DOCKER_IMAGE}:\${DOCKER_TAG}")
                    echo "‚úÖ Image published successfully: ${DOCKER_USER}/${DOCKER_IMAGE}:${DOCKER_TAG}"
                }
            }
        }

        stage('Trivy Image Scan') {
            when {
                expression { return env.ONLY_JENKINSFILE_CHANGED != 'true' }
            }
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'login-ghcr', usernameVariable: 'USR', passwordVariable: 'PSW')]) {
                        sh(label: "üîë Authenticating with GitHub Container Registry", script: 'echo $PSW | docker login ghcr.io -u $USR --password-stdin')
                    }

                    sh(label: "üîí Scanning Docker image", script: """
                        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v trivy-db:/root/.cache/ aquasec/trivy image \\
                        --cache-dir /root/.cache/ \\
                        --no-progress \\
                        --severity HIGH,CRITICAL \\
                        --ignore-unfixed \\
                        --timeout 2700s \\
                        \${DOCKER_USER}/\${DOCKER_IMAGE}:\${DOCKER_TAG} > \${SCAN_OUTPUT}
                    """)
                    sh(label: "üìÑ Showing scan results", script: "cat ${SCAN_OUTPUT}")
                }
            }
        }

        stage('Cleanup Before Deploy') {
            when {
                expression { return env.ONLY_JENKINSFILE_CHANGED != 'true' }
            }
            steps {
                cleanWs()
            }
        }

        stage('Checkout Deploy') {
            when {
                expression { return env.ONLY_JENKINSFILE_CHANGED != 'true' }
            }
            steps {
                script {
                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: 'main']],
                        userRemoteConfigs: [
                            [
                                url: env.DEPLOY_SCM,
                                credentialsId: 'login-github'
                            ]
                        ]
                    ])
                }
            }
        }

        stage('Setup Git Configuration') {
            when {
                expression { return env.ONLY_JENKINSFILE_CHANGED != 'true' }
            }
            steps {
                script {
                    def currentBranch = sh(label: "üîç Checking current branch", script: "git rev-parse --abbrev-ref HEAD", returnStdout: true).trim()
                    
                    if (currentBranch != env.DEPLOY_BRANCH) {
                        echo "Current branch is ${currentBranch}. Switching to branch ${env.DEPLOY_BRANCH}."
                        sh(label: "üîÑ Switching branch", script: "git checkout ${env.DEPLOY_BRANCH}")
                    }
                }
            }
        }

        stage('Deploy to Production') {
            when {
                expression { return env.ONLY_JENKINSFILE_CHANGED != 'true' }
            }
            steps {
                script {
                    sh(label: "üîÑ Updating image tag", script: "sed -i 's|${env.DOCKER_USER}/${env.DOCKER_IMAGE}:v[^ ]*|${env.DOCKER_USER}/${env.DOCKER_IMAGE}:${env.DOCKER_TAG}|g' ${DEPLOYMENT_FILE}")
                    sh(label: "üìÑ Showing deployment configuration", script: "cat ${DEPLOYMENT_FILE}")
                    sh(label: "üöÄ Pushing deployment changes", script: """
                        git add ${DEPLOYMENT_FILE}
                        git status
                        git commit -m "Update deployment file to use version ${DOCKER_TAG}"
                        git push origin ${DEPLOY_BRANCH}
                    """)
                }
                checkout([
                        $class: 'GitSCM',
                        branches: [[name: 'main']],
                        userRemoteConfigs: [
                            [
                                url: env.BUILD_SCM,
                                credentialsId: 'login-github'
                            ]
                        ]
                    ])
            }
        }
    }

    post {
        always {
            script {
                if (env.ONLY_JENKINSFILE_CHANGED != 'true') {
                    sh(label: "üßπ Logging out from registries", script: """
                        docker logout
                        docker logout ghcr.io
                    """)
                    
                    try {
                        sh(label: "üóëÔ∏è Cleaning up old images", script: """
                            for tag in \$(docker images "${DOCKER_USER}/${DOCKER_IMAGE}" --format "{{.Tag}}" | grep -v "${DOCKER_TAG}"); do
                                echo "   Removing ${DOCKER_USER}/${DOCKER_IMAGE}:\$tag"
                                docker rmi "${DOCKER_USER}/${DOCKER_IMAGE}:\$tag" || true
                            done

                            echo "   Removing dangling images..."
                            docker image prune -f
                        """)
                    } catch (err) {
                        echo "‚ö†Ô∏è Warning: Failed to clean up some Docker images: ${err.message}"
                    }
                }
            }
        }
        success {
            echo '‚úÖ Pipeline completed successfully!'
        }
        failure {
            echo '‚ùå Pipeline failed!'
        }
    }
}
